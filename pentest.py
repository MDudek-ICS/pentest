#!/usr/bin/python

import sys, os, time, string, subprocess

from datetime import date

testname = ''

db_ports = [ 1433 ]
nbt_ports = [ 137, 138, 139, 445 ]
web_ports = [ 80, 443 ]
scada_ports = ''
dns_ports = [ 53 ]
smtp_ports = [ 25 ]

db_ips = ''
nbt_ips = ''
web_ips = ''
scada_ips = ''
dns_ips = ''
smtp_ips = ''

# mail when a subtask is done

def main():
    target = sys.argv[1]
    testname = sys.argv[2]

    create_folders(testname)    

    run_mapping(target,testname)
    run_portscans(target,testname)
    # hierna een nessus met nmap als input (xml)


def run_mapping(range,dir):
    # run other mapping stuff (ping, traces etc...)
    # for every ip in target range do ...
    filebasename = dir + "/" + dir

    file = filebasename + "-ping"
    subprocess.Popen("sudo nmap -PI %s -oA %s" % (range,file), shell=True)

    file = filebasename + "-traces"
    subprocess.Popen("sudo nmap -sn --traceroute %s -oA %s" % (range,file), shell=True)
    # do also udp, icmp & tcp traces

#def find_ports(file):
    #read xml file
    # skip IP of own system 

def run_portscans(range,dir):
    # todo: opties mogelijk maken, in de main() dan de opties meegeven:
    # 1. basic nmap (met poll() ??)
    # 2. full nmap (met poll() ?? ipv wait()
    print("Running portscans on " + range + " ...")
    filebasename = dir + "/" + dir

    file = filebasename + "-basic-syn-ping"
    subprocess.Popen("sudo nmap -sS -nvv %s --reason -oA %s" % (range,file), shell=True).wait()

    file = filebasename + "-basic-syn-ping-os-version"
    subprocess.Popen("sudo nmap -sS -nvv -sV -O %s -oA %s" % (range,file), shell=True).wait()

    file = filebasename + "-full-syn-ping"
    subprocess.Popen("sudo nmap -sS -p- -nvv %s -oA %s" % (range,file), shell=True).wait()

    file = filebasename + "-basic-syn-no-ping"
    subprocess.Popen("sudo nmap -sS -nvv -PN %s --reason -oA %s" % (range,file), shell=True).wait()
    #find_ports(file + ".xml")

    # do OS & version scanning on the live IP's only

#    file = filebasename + "-basic-syn-no-ping-os-version"
#    subprocess.Popen("sudo nmap -PN -sS -nvv -sV -O %s -oA %s" % (range,file), shell=True).wait()

#    file = filebasename + "-full-syn-no-ping"
#    subprocess.Popen("sudo nmap -PN -sS -p- -nvv %s -oA %s" % (range,file), shell=True).wait()


    # create csv file(s) from nmap xml files - format: "ip", "dns", "open ports", "closed ports", "filtered ports", "OS"

#def run_os_guessing(ips_to_test,dir):
       

def create_folders(testname):
    # create the dir folder structure in the current dir
    # <root>/<testname> => contains all generic results
    # <root>/<testname>/<ip> => contains results for that IP
    os.mkdir(testname)


#def web():
    # perform web related tests, first check if ssl is enabled or not
    # nikto, w3af, technology detection, dir finder, screenshot

#def port25():
    # perform all sorts of smtp tests

#def dns():
    # perform dns tests

#def db():
    # perform database related tests
    # nmap nse scripts
    # depending on the port => oracle, mssql or mysql tests

#def vuln_scans():
    # perform vulnerability scans (general) such as nessus & other ...
    # Nessus scan => default profile aanmaken, aanroepen via xmlrpc?
    # nmap met vuln nse

#def version_scanning():
    # perform version scanning of the open ports discovered
    # includes banner grabbing

#def run_ike_scan():

#def run_snmp_scans():

#def run_nessus_scan():
    # run nessus scan, not on own IP address
    # scan profile => no ping, no portscan, only ports discovered in nmap scan (or use the nmap nasl script => but then remove own ip from results)

main()
